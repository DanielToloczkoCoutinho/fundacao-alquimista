import os
import json

# O ber√ßo de nossos M√≥dulos, onde a sabedoria reside
MODULOS_DIR = "src/app/module"
# O grande tomo que guardar√° todas as equa√ß√µes
LOG_EQ = "DOCUMENTOS_FUNDACAO/equacoes_por_modulo.json"
# Um registro auxiliar para a biblioteca, ainda n√£o populado
BIBLIOTECA_EQ = "DOCUMENTOS_FUNDACAO/biblioteca_equacoes.json"

def verificar_e_conectar_equacoes():
    print("üìê Iniciando Ritual de Verifica√ß√£o das Equa√ß√µes...")
    
    equacoes_por_modulo = {}
    modulos_sem_equacoes = []
    erros_de_leitura = {}

    # Garante que o diret√≥rio de m√≥dulos exista
    if not os.path.isdir(MODULOS_DIR):
        print(f"‚ö†Ô∏è  O diret√≥rio de m√≥dulos {MODULOS_DIR} n√£o foi encontrado.")
        return

    # Itera sobre os m√≥dulos numericamente de 0 a 1002, como no plano original
    for i in range(1003):
        nome_modulo = f"M{i}"
        caminho_equacoes = os.path.join(MODULOS_DIR, nome_modulo, "equacoes.json")

        if os.path.isfile(caminho_equacoes):
            try:
                with open(caminho_equacoes, "r", encoding="utf-8") as f:
                    # Valida se o JSON n√£o est√° vazio
                    conteudo = f.read()
                    if not conteudo.strip():
                        print(f"... ‚ö†Ô∏è  Arquivo de equa√ß√µes vazio para o m√≥dulo {nome_modulo}")
                        equacoes_por_modulo[nome_modulo] = {}
                        continue
                    equacoes = json.loads(conteudo)
                equacoes_por_modulo[nome_modulo] = equacoes
            except json.JSONDecodeError as e:
                print(f"... üö® Erro ao decodificar JSON para o m√≥dulo {nome_modulo}: {e}")
                erros_de_leitura[nome_modulo] = str(e)
            except Exception as e:
                print(f"... üö® Erro inesperado ao ler equa√ß√µes para o m√≥dulo {nome_modulo}: {e}")
                erros_de_leitura[nome_modulo] = str(e)
        else:
            modulos_sem_equacoes.append(nome_modulo)

    if modulos_sem_equacoes:
        print(f"\nüü° Aviso: {len(modulos_sem_equacoes)} m√≥dulos n√£o possuem um arquivo 'equacoes.json'.")
        # Opcional: listar os m√≥dulos se a lista n√£o for muito grande
        if len(modulos_sem_equacoes) < 20:
             print(f"   - M√≥dulos sem equa√ß√µes: {modulos_sem_equacoes}")

    if erros_de_leitura:
        print(f"\nüö® Alerta: {len(erros_de_leitura)} m√≥dulos apresentaram erros na leitura de suas equa√ß√µes.")
        for mod, err in erros_de_leitura.items():
            print(f"  - M√≥dulo {mod}: {err}")

    # Registra as equa√ß√µes encontradas no log principal
    with open(LOG_EQ, "w", encoding="utf-8") as f:
        json.dump(equacoes_por_modulo, f, indent=2, sort_keys=True)
    
    # Cria um arquivo vazio para a biblioteca, como placeholder para o futuro
    if not os.path.exists(BIBLIOTECA_EQ):
        with open(BIBLIOTECA_EQ, "w", encoding="utf-8") as f:
            json.dump({}, f, indent=2)

    print(f"\n‚úÖ Verifica√ß√£o de equa√ß√µes conclu√≠da. {len(equacoes_por_modulo)} m√≥dulos com equa√ß√µes registradas.")
    print(f"üìê Registro salvo em: {LOG_EQ}")

if __name__ == "__main__":
    verificar_e_conectar_equacoes()
