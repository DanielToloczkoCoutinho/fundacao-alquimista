
import os
import shutil
import argparse
import sys

def replicar_tecnologia(tecnologia, fonte, destino):
    """
    Replica uma estrutura de tecnologia de um m√≥dulo de origem para um ou mais m√≥dulos de destino.
    """
    print(f"üåø Iniciando o Ritual de Replica√ß√£o para a tecnologia: {tecnologia}")
    print(f"   Fonte: {fonte}")
    print(f"   Destino: {destino}")

    # O caminho da tecnologia de origem
    caminho_fonte = os.path.join(fonte, tecnologia)

    if not os.path.exists(caminho_fonte):
        print(f"‚ùå ERRO: O caminho da tecnologia de origem n√£o foi encontrado em '{caminho_fonte}'")
        sys.exit(1)

    # Determinar os m√≥dulos de destino
    destinos = []
    if destino.lower() == "todos":
        print("   Identificando todos os m√≥dulos da Funda√ß√£o...")
        # Assume uma conven√ß√£o de nomenclatura de MODULO_0 a MODULO_1000
        # Uma abordagem mais robusta poderia ser scanear o sistema de arquivos
        destinos = [f"MODULO_{i}" for i in range(1001)] # 0 a 1000
    else:
        destinos = [destino]

    m√≥dulos_replicados = 0
    for mod_destino in destinos:
        if mod_destino == fonte:
            continue # N√£o replicar para a pr√≥pria fonte

        caminho_destino_final = os.path.join(mod_destino, tecnologia)
        
        try:
            # Garante que o m√≥dulo de destino base exista
            if not os.path.exists(mod_destino):
                print(f"   M√≥dulo de destino '{mod_destino}' n√£o encontrado. Pulando.")
                continue

            # Remove a estrutura antiga, se existir, para garantir uma c√≥pia limpa
            if os.path.exists(caminho_destino_final):
                shutil.rmtree(caminho_destino_final)
                
            # Copia a √°rvore de diret√≥rios da tecnologia
            shutil.copytree(caminho_fonte, caminho_destino_final, dirs_exist_ok=True)
            print(f"   ‚úÖ Tecnologia '{tecnologia}' replicada com sucesso para '{mod_destino}'.")
            m√≥dulos_replicados += 1
        except Exception as e:
            print(f"   ‚ùå Falha ao replicar para '{mod_destino}': {e}")

    print(f"‚ú® Ritual de Replica√ß√£o conclu√≠do. {m√≥dulos_replicados} m√≥dulos atualizados.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Script para replicar tecnologias entre m√≥dulos da Funda√ß√£o.")
    parser.add_argument("--tecnologia", required=True, help="O nome da pasta da tecnologia a ser replicada (ex: Tailwind, Docker).")
    parser.add_argument("--fonte", required=True, help="O m√≥dulo de origem (ex: MODULO_9).")
    parser.add_argument("--destino", required=True, help="O m√≥dulo de destino, ou 'todos' para replicar em todos os m√≥dulos.")

    args = parser.parse_args()

    replicar_tecnologia(args.tecnologia, args.fonte, args.destino)
