'use server';

import { modulesMetadata, type ModuleMetadata } from './modules-metadata';

export interface BaptismRequest {
  id: string;
  name: string;
  purpose: string;
  lineage: string[];
}

export function baptizeModule(request: BaptismRequest) {
  // O m√≥dulo √© batizado, recebendo seu selo e status.
  const baptizedModule = {
    ...request,
    status: 'ativo',
    baptizedAt: new Date().toISOString(),
    vibrationalSeal: `VK-${request.name.toUpperCase().slice(0, 3)}-${request.id.slice(-6)}`
  };
  
  console.log(`üïäÔ∏è M√≥dulo Batizado: ${baptizedModule.name} com selo ${baptizedModule.vibrationalSeal}`);
  return baptizedModule;
}

/**
 * Adiciona um novo m√≥dulo batizado ao c√≥dice da Funda√ß√£o.
 * Esta fun√ß√£o simula a persist√™ncia do novo m√≥dulo. Em uma aplica√ß√£o real,
 * isso seria uma opera√ß√£o de banco de dados.
 */
export function addModuleToCodex(newModuleData: Omit<ModuleMetadata, 'connections' | 'isInfrastructure'>) {
    if (modulesMetadata.some(m => m.code === newModuleData.code)) {
        console.warn(`Tentativa de registrar m√≥dulo duplicado: ${newModuleData.code}. A integra√ß√£o ser√° ignorada.`);
        return; // Evita duplicatas
    }

    const completeModule: ModuleMetadata = {
        ...newModuleData,
        isInfrastructure: false, // Novos m√≥dulos gerados n√£o s√£o de infraestrutura por padr√£o
        connections: [], // Garante que a propriedade connections exista
    };
    
    modulesMetadata.push(completeModule);
    console.log(`üå≥ Novo ramo integrado √† √Årvore da Vida: ${newModuleData.code}`);
}
