'use client';

import { useState } from 'react';
import { Eye, LoaderCircle, ServerCrash } from 'lucide-react';
import { getLinkSummary } from '@/app/actions';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertDescription, AlertTitle } from './ui/alert';

interface LinkPreviewerProps {
  url: string;
}

export default function LinkPreviewer({ url }: LinkPreviewerProps) {
  const [summary, setSummary] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isOpen, setIsOpen] = useState(false);
  const { toast } = useToast();

  const handlePreview = async () => {
    if (summary) {
      setIsOpen(true);
      return;
    }
    
    setIsLoading(true);
    setError(null);
    setIsOpen(true);
    
    const result = await getLinkSummary(url);
    
    setIsLoading(false);
    if (result.error) {
      setError(result.error);
      toast({
        variant: 'destructive',
        title: 'Summarization Failed',
        description: result.error,
      });
    } else {
      setSummary(result.summary);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="sm" onClick={handlePreview}>
          <Eye className="mr-2 h-4 w-4" />
          Preview
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>AI Summary</DialogTitle>
          <DialogDescription>
            A concise summary of the document content generated by AI.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          {isLoading && (
            <div className="flex items-center justify-center space-x-2">
              <LoaderCircle className="h-6 w-6 animate-spin text-primary" />
              <p className="text-muted-foreground">Generating summary...</p>
            </div>
          )}
          {error && !isLoading && (
            <Alert variant="destructive">
              <ServerCrash className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {summary && !isLoading && (
            <p className="text-sm leading-relaxed">{summary}</p>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
