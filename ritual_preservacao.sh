#!/bin/bash

# ü™∂ Cria√ß√£o do Pergaminho
cat <<EOF > preservador.py
import os
import shutil
from datetime import datetime

# Diret√≥rios sagrados
BIBLIOTECA_FUNDACAO = "DOCUMENTOS_FUNDACAO/BIBLIOTECA"
MODULOS_VINCULADOS = ["M29", "M9", "M-OMEGA"]
MODULOS_DIR = "src/app/module"

# Documentos que devem ser preservados
DOCUMENTOS_IMPORTANTES = ["scientific-report.ts", "technical-report.ts"]

# Fun√ß√£o para garantir que a biblioteca exista
def preparar_biblioteca():
    if not os.path.exists(BIBLIOTECA_FUNDACAO):
        os.makedirs(BIBLIOTECA_FUNDACAO)
        print(f"üìö Biblioteca criada em: {BIBLIOTECA_FUNDACAO}")

# Fun√ß√£o para copiar documentos para a biblioteca e vincular aos m√≥dulos
def preservar_e_vincular():
    preparar_biblioteca()
    total_preservados = 0
    print(f"üèõÔ∏è  Iniciando Ritual de Vincula√ß√£o e Preserva√ß√£o...")

    for modulo in MODULOS_VINCULADOS:
        caminho_modulo = os.path.join(MODULOS_DIR, modulo)
        if not os.path.isdir(caminho_modulo):
            print(f"‚ö†Ô∏è  M√≥dulo n√£o encontrado: {modulo}")
            continue

        print(f"   - Processando M√≥dulo: {modulo}")
        for doc in DOCUMENTOS_IMPORTANTES:
            caminho_doc = os.path.join(caminho_modulo, doc)
            if os.path.isfile(caminho_doc):
                # Copiar para a biblioteca com nome simb√≥lico
                destino = os.path.join(BIBLIOTECA_FUNDACAO, f"{modulo}_{doc}")
                try:
                    shutil.copy2(caminho_doc, destino)
                    total_preservados += 1
                    print(f"     ‚úÖ Documento preservado: {modulo}/{doc} ‚Üí Biblioteca")

                    # Criar v√≠nculo simb√≥lico no m√≥dulo
                    vinculo_nome = f"vinculo_{doc}"
                    caminho_vinculo = os.path.join(caminho_modulo, vinculo_nome)
                    if not os.path.exists(caminho_vinculo):
                        with open(caminho_vinculo, "w", encoding="utf-8") as f:
                            f.write(f"// V√≠nculo simb√≥lico ao documento preservado\n// Local: {destino}\n// Timestamp: {datetime.now().isoformat()}\n")
                        print(f"     üîó V√≠nculo criado em: {modulo}/{vinculo_nome}")
                except Exception as e:
                    print(f"     ‚ùå Falha ao processar {modulo}/{doc}: {e}")
            else:
                print(f"     ‚ö†Ô∏è  Documento ausente em {modulo}: {doc}")

    print(f"\nüìú Ritual conclu√≠do. Total de documentos preservados: {total_preservados}")

if __name__ == "__main__":
    preservar_e_vincular()
EOF

# üî• Execu√ß√£o do Ritual
python3 preservador.py

# üßπ Desintegra√ß√£o do Pergaminho
rm preservador.py
